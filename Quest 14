#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

const char *englishFreqOrder = "ETAOINSHRDLUCMWFGYPBVKJXQZ";

void decryptSubstitution(const char *ciphertext, char *plaintext, const char *key) {
    int length = strlen(ciphertext);

    for (int i = 0; i < length; i++) {
        if (isalpha(ciphertext[i])) {
            char uppercaseChar = toupper(ciphertext[i]);
            int index = uppercaseChar - 'A';
            plaintext[i] = islower(ciphertext[i]) ? tolower(key[index]) : key[index];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[length] = '\0';
}

void swap(char *a, char *b) {
    char temp = *a;
    *a = *b;
    *b = temp;
}

void generatePossiblePlaintexts(const char *ciphertext, char *key, int pos,
                                int *count, int maxCount, char **plaintexts) {
    if (*count >= maxCount) {
        return;
    }

    if (pos == ALPHABET_SIZE) {
        char decryptedText[strlen(ciphertext) + 1];
        decryptSubstitution(ciphertext, decryptedText, key);
        plaintexts[*count] = strdup(decryptedText);
        (*count)++;
        return;
    }

    for (int i = pos; i < ALPHABET_SIZE; i++) {
        swap(&key[pos], &key[i]);
        generatePossiblePlaintexts(ciphertext, key, pos + 1, count, maxCount, plaintexts);
        swap(&key[pos], &key[i]); // Backtrack
    }
}

int main() {
    const char *ciphertext = "Zklv lv d whvw phvvdjh.";
    char key[ALPHABET_SIZE + 1];
    strcpy(key, "ABCDEFGHIJKLMNOPQRSTUVWXYZ"); // Initial key

    int topPlaintexts = 10; // Number of top plaintexts to display
    char *possiblePlaintexts[topPlaintexts];

    int count = 0;
    generatePossiblePlaintexts(ciphertext, key, 0, &count, topPlaintexts, possiblePlaintexts);

    printf("Ciphertext: %s\n\n", ciphertext);
    printf("Possible Plaintexts:\n");
    for (int i = 0; i < count; i++) {
        printf("%d. %s\n", i + 1, possiblePlaintexts[i]);
        free(possiblePlaintexts[i]);
    }

    return 0;
}
