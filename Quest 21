#include <stdio.h>
#include <string.h>

#define BLOCK_SIZE 8

// ECB encryption
void ecbEncrypt(const char *plaintext, const char *key, char *ciphertext, int size) {
    for (int i = 0; i < size; i += BLOCK_SIZE) {
        for (int j = 0; j < BLOCK_SIZE; j++) {
            ciphertext[i + j] = plaintext[i + j] ^ key[j];
        }
    }
}

// ECB decryption
void ecbDecrypt(const char *ciphertext, const char *key, char *plaintext, int size) {
    ecbEncrypt(ciphertext, key, plaintext, size); // Decryption is the same as encryption
}

// CBC encryption
void cbcEncrypt(const char *plaintext, const char *key, const char *iv, char *ciphertext, int size) {
    char prevBlock[BLOCK_SIZE];
    strcpy(prevBlock, iv);

    for (int i = 0; i < size; i += BLOCK_SIZE) {
        for (int j = 0; j < BLOCK_SIZE; j++) {
            ciphertext[i + j] = plaintext[i + j] ^ key[j] ^ prevBlock[j];
        }
        strcpy(prevBlock, &ciphertext[i]); // Update previous block
    }
}

// CBC decryption
void cbcDecrypt(const char *ciphertext, const char *key, const char *iv, char *plaintext, int size) {
    char prevBlock[BLOCK_SIZE];
    strcpy(prevBlock, iv);

    for (int i = 0; i < size; i += BLOCK_SIZE) {
        for (int j = 0; j < BLOCK_SIZE; j++) {
            plaintext[i + j] = ciphertext[i + j] ^ key[j] ^ prevBlock[j];
        }
        strcpy(prevBlock, &ciphertext[i]); // Update previous block
    }
}

// CFB encryption
void cfbEncrypt(const char *plaintext, const char *key, const char *iv, char *ciphertext, int size) {
    char prevBlock[BLOCK_SIZE];
    strcpy(prevBlock, iv);

    for (int i = 0; i < size; i += BLOCK_SIZE) {
        for (int j = 0; j < BLOCK_SIZE; j++) {
            char encryptedByte = plaintext[i + j] ^ key[j];
            ciphertext[i + j] = encryptedByte ^ prevBlock[j];
            prevBlock[j] = encryptedByte;
        }
    }
}

// CFB decryption
void cfbDecrypt(const char *ciphertext, const char *key, const char *iv, char *plaintext, int size) {
    cfbEncrypt(ciphertext, key, iv, plaintext, size); // Decryption is the same as encryption
}

int main() {
    const char *plaintext = "HELLO123HELLO123"; // Multiple of BLOCK_SIZE
    const char *key = "SECRETKEY";
    const char *iv = "INITVEC";

    int size = strlen(plaintext);

    char ciphertextEcb[size];
    char decryptedEcb[size];
    char ciphertextCbc[size];
    char decryptedCbc[size];
    char ciphertextCfb[size];
    char decryptedCfb[size];

    ecbEncrypt(plaintext, key, ciphertextEcb, size);
    ecbDecrypt(ciphertextEcb, key, decryptedEcb, size);

    cbcEncrypt(plaintext, key, iv, ciphertextCbc, size);
    cbcDecrypt(ciphertextCbc, key, iv, decryptedCbc, size);

    cfbEncrypt(plaintext, key, iv, ciphertextCfb, size);
    cfbDecrypt(ciphertextCfb, key, iv, decryptedCfb, size);

    printf("Original Plaintext: %s\n", plaintext);
    printf("ECB Ciphertext: %s\n", ciphertextEcb);
    printf("ECB Decrypted: %s\n", decryptedEcb);
    printf("CBC Ciphertext: %s\n", ciphertextCbc);
    printf("CBC Decrypted: %s\n", decryptedCbc);
    printf("CFB Ciphertext: %s\n", ciphertextCfb);
    printf("CFB Decrypted: %s\n", decryptedCfb);

    return 0;
}
